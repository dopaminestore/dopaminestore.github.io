{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","length","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","props","state","email","error","handleChange","bind","handleClick","e","this","setState","target","value","check","includes","console","log","data","ref","child","push","history","className","color","noValidate","autoComplete","TextField","required","id","label","variant","onChange","InputProps","inputProps","style","width","background","borderRadius","textField","Fab","onClick","Component","Confirmed","Stack","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,iOC8BtCC,OAAcC,QACfD,gBAZmB,CACrBE,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iB,IAOXC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,GACPC,MAAO,IAET,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAPF,E,yDAUNE,GACXC,KAAKC,SAAS,CAAEP,MAAOK,EAAEG,OAAOC,MAAOR,MAAO,O,oCAI9C,IAAIS,EAAQJ,KAAKP,MAAMC,MAAMW,SAAS,cAEtC,GADAC,QAAQC,IAAIH,GACC,GAATA,EAAe,CACjB,IAAMI,EAAO,CACX,MAASR,KAAKP,MAAMC,OAEXb,aAAoB4B,MAAMC,MAAM,YAAYC,KAAKH,GAC5DR,KAAKC,SAAS,CAACP,MAAO,KACtBM,KAAKR,MAAMoB,QAAQD,KAAK,mBAGxBX,KAAKC,SAAS,CAAEN,MAAO,qB,+BAKzB,OACE,yBAAKkB,UAAU,OACb,4BAAQA,UAAU,cAChB,4BAAI,0BAAMA,UAAU,cAAcC,MAAM,QAApC,2DACJ,0BAAOC,YAAU,EAACC,aAAa,OAC7B,kBAACC,EAAA,EAAD,CACAH,MAAM,YACNI,UAAQ,EACRf,MAAOH,KAAKP,MAAMC,MAClByB,GAAG,QACHC,MAAM,QACNC,QAAQ,WACRC,SAAUtB,KAAKJ,aACf2B,WAAY,CACVC,WAAY,CACVC,MAAO,CACLC,MAAO,IACPC,WAAY,OACZC,aAAc,KAGlBH,MAAO,CACLG,aAAc,IAEhBC,UAAU,4BACU,CACdD,aAAc,QAKjB,6BACP,kBAACE,EAAA,EAAD,CAAKjB,UAAU,cAAckB,QAAS/B,KAAKF,YAAagB,MAAM,YAAYO,QAAQ,YAChF,kBAAC,IAAD,MADF,OAEE,0BAAMR,UAAU,cAAcC,MAAM,QAApC,iB,GAlEMkB,aA0EZC,E,uKAGF,OACE,yBAAKpB,UAAU,OACb,4BAAQA,UAAU,cAChB,4BAAI,0BAAMA,UAAU,cAAcC,MAAM,QAApC,6C,GANUkB,aA0BTE,E,uKAXX,OACE,kBAAC,IAAD,KACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAO,EAAMC,KAAK,IAAIC,UAAW9C,IACxC,kBAAC,IAAD,CAAO4C,OAAO,EAAMC,KAAK,aAAaC,UAAWJ,U,GANzCD,aC7GAM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3D,GACLW,QAAQX,MAAMA,EAAM4D,c","file":"static/js/main.23651ed1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ReactDOM from 'react-dom';\nimport Fab from '@material-ui/core/Fab';\nimport TextField from '@material-ui/core/TextField';\nimport SendIcon from '@material-ui/icons/Send';\nimport {\n  fade,\n  ThemeProvider,\n  withStyles,\n  makeStyles,\n  createMuiTheme,\n} from '@material-ui/core/styles';\nimport InputBase from '@material-ui/core/InputBase';\nimport { green } from '@material-ui/core/colors';\nimport * as firebase from \"firebase\";\nimport { BrowserRouter, Route,Switch} from 'react-router-dom';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA_rPzl1D8YouEsSJ1AjQwElFqH_mxOAFI\",\n  authDomain: \"realtime-4a7de.firebaseapp.com\",\n  databaseURL: \"https://realtime-4a7de.firebaseio.com\",\n  projectId: \"realtime-4a7de\",\n  storageBucket: \"realtime-4a7de.appspot.com\",\n  messagingSenderId: \"624733681109\",\n  appId: \"1:624733681109:web:ab5c7b2277fbf1ffd6b95c\",\n  measurementId: \"G-W109P6TCZL\"\n};\n\nif (!firebase.apps.length) {\n    firebase.initializeApp(firebaseConfig);\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      error: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({ email: e.target.value, error: '' });\n  }\n\n  handleClick(){\n    var check = this.state.email.includes('@gmail.com');\n    console.log(check);\n    if (check == true) {\n      const data = {\n        'email': this.state.email\n      };\n      const db = firebase.database().ref().child(\"dopamine\").push(data);\n      this.setState({email: ''});\n      this.props.history.push('/confirmed');\n    }\n    else {\n      this.setState({ error: 'Invalid format' });\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h3><font className=\"roboto-font\" color=\"#FFF\">The next big fashion store is here, join our waitlist.</font></h3>\n          <form  noValidate autoComplete=\"off\">\n            <TextField\n            color=\"secondary\"\n            required\n            value={this.state.email}\n            id=\"email\"\n            label=\"Email\"\n            variant=\"outlined\"\n            onChange={this.handleChange}\n            InputProps={{\n              inputProps: {\n                style: {\n                  width: 200,\n                  background: '#fff',\n                  borderRadius: 30\n                },\n              },\n              style: {\n                borderRadius: 30\n              },\n              textField: {\n                  [`& fieldset`]: {\n                    borderRadius: 0,\n                  },\n              }\n            }}\n             />\n          </form><br />\n          <Fab className=\"roboto-font\" onClick={this.handleClick} color=\"secondary\" variant=\"extended\">\n            <SendIcon/>&nbsp;\n            <font className=\"roboto-font\" color=\"#FFF\">Signup</font>\n          </Fab>\n        </header>\n      </div>\n    );\n  }\n}\n\nclass Confirmed extends Component {\n\n  render () {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h3><font className=\"roboto-font\" color=\"#FFF\">You've been added to our waitlist.</font></h3>\n        </header>\n      </div>\n    );\n  }\n}\n\nclass Stack extends Component{\n  render () {\n    return (\n      <BrowserRouter>\n          <Switch>\n            <Route exact={true} path=\"/\" component={App} />\n            <Route exact={true} path=\"/confirmed\" component={Confirmed} />\n          </Switch>\n     </BrowserRouter>\n    );\n  }\n}\n\nexport default Stack;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}